name: Deploy to Amazon ECS

on:
  workflow_dispatch:

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
#   ECS_SERVICE: MY_ECS_SERVICE
#   ECS_CLUSTER: MY_ECS_CLUSTER
#   ECS_TASK_DEFINITION: MY_ECS_TASK_DEFINITION
#   CONTAINER_NAME: MY_CONTAINER_NAME

permissions:
  contents: read
  id-token: write

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: "Configure AWS Credentials"
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        working-directory: ./server
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          IMAGE_TAG="server-app:latest"
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    #   - name: Fill in the new image ID in the Amazon ECS task definition
    #     id: task-def
    #     uses: aws-actions/amazon-ecs-render-task-definition@v1
    #     with:
    #       task-definition: ${{ env.ECS_TASK_DEFINITION }}
    #       container-name: ${{ env.CONTAINER_NAME }}
    #       image: ${{ steps.build-image.outputs.image }}

    #   - name: Deploy Amazon ECS task definition
    #     uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    #     with:
    #       task-definition: ${{ steps.task-def.outputs.task-definition }}
    #       service: ${{ env.ECS_SERVICE }}
    #       cluster: ${{ env.ECS_CLUSTER }}
    #       wait-for-service-stability: true
